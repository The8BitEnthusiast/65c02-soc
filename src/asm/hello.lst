ca65 V2.19 - Git 03d824e13
Main file   : hello.s
Current file: hello.s

000000r 1               .SEGMENT "MYCODE"
000000r 1               .org $8000
008000  1               
008000  1               PORTB = $6000
008000  1               PORTA = $6001
008000  1               DDRB = $6002
008000  1               DDRA = $6003
008000  1               
008000  1               E  = %10000000
008000  1               RW = %01000000
008000  1               RS = %00100000
008000  1               
008000  1               reset:
008000  1  A2 FF          ldx #$ff
008002  1  9A             txs
008003  1               
008003  1  A9 FF          lda #%11111111 ; Set all pins on port B to output
008005  1  8D 02 60       sta DDRB
008008  1  A9 E0          lda #%11100000 ; Set top 3 pins on port A to output
00800A  1  8D 03 60       sta DDRA
00800D  1               
00800D  1                 ; perform initialization by instruction as per datasheet
00800D  1  A9 38          lda #%00111000 ; Set 8-bit mode; 2-line display; 5x8 font
00800F  1  20 85 80       jsr lcd_instruction_nowait
008012  1  20 B4 80       jsr delay
008015  1  A9 38          lda #%00111000 ; Set 8-bit mode; 2-line display; 5x8 font
008017  1  20 85 80       jsr lcd_instruction_nowait
00801A  1  20 B4 80       jsr delay
00801D  1  A9 38          lda #%00111000 ; Set 8-bit mode; 2-line display; 5x8 font
00801F  1  20 85 80       jsr lcd_instruction_nowait
008022  1  20 B4 80       jsr delay
008025  1               
008025  1  A9 0E          lda #%00001110 ; Display on; cursor on; blink off
008027  1  20 85 80       jsr lcd_instruction_nowait
00802A  1  20 B4 80       jsr delay
00802D  1  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
00802F  1  20 85 80       jsr lcd_instruction_nowait
008032  1  20 B4 80       jsr delay
008035  1  A9 01          lda #$00000001 ; Clear display
008037  1  20 85 80       jsr lcd_instruction_nowait
00803A  1  20 B4 80       jsr delay
00803D  1               
00803D  1  A2 00          ldx #0
00803F  1               print:
00803F  1  BD 4E 80       lda message,x
008042  1  F0 07          beq loop
008044  1  20 9B 80       jsr print_char
008047  1                 ;jsr short_delay    ; short delay to make sure busy flag is available
008047  1                 ;jsr short_delay
008047  1  E8             inx
008048  1  4C 3F 80       jmp print
00804B  1               
00804B  1               loop:
00804B  1  4C 4B 80       jmp loop
00804E  1               
00804E  1  48 65 6C 6C  message: .asciiz "Hello, world!"
008052  1  6F 2C 20 77  
008056  1  6F 72 6C 64  
00805C  1               
00805C  1               lcd_wait:
00805C  1  48             pha
00805D  1  A9 00          lda #%00000000  ; Port B is input
00805F  1  8D 02 60       sta DDRB
008062  1               lcdbusy:
008062  1  A9 40          lda #RW
008064  1  8D 01 60       sta PORTA
008067  1  A9 C0          lda #(RW | E)
008069  1  8D 01 60       sta PORTA
00806C  1  20 C2 80       jsr short_delay  ; extend enable pulse to satisfy datasheet (>450ns)
00806F  1  AD 00 60       lda PORTB
008072  1  29 80          and #%10000000
008074  1  D0 EC          bne lcdbusy
008076  1               
008076  1  A9 40          lda #RW
008078  1  8D 01 60       sta PORTA
00807B  1  A9 FF          lda #%11111111  ; Port B is output
00807D  1  8D 02 60       sta DDRB
008080  1  68             pla
008081  1  60             rts
008082  1               
008082  1               lcd_instruction:
008082  1  20 5C 80       jsr lcd_wait
008085  1               lcd_instruction_nowait:
008085  1  8D 00 60       sta PORTB
008088  1  A9 00          lda #0         ; Clear RS/RW/E bits
00808A  1  8D 01 60       sta PORTA
00808D  1  A9 80          lda #E         ; Set E bit to send instruction
00808F  1  8D 01 60       sta PORTA
008092  1  20 C2 80       jsr short_delay  ; extend pulse width to meet datasheet (>450ns)
008095  1  A9 00          lda #0         ; Clear RS/RW/E bits
008097  1  8D 01 60       sta PORTA
00809A  1  60             rts
00809B  1               
00809B  1               print_char:
00809B  1  20 5C 80       jsr lcd_wait
00809E  1               print_char_nowait:
00809E  1  8D 00 60       sta PORTB
0080A1  1  A9 20          lda #RS         ; Set RS; Clear RW/E bits
0080A3  1  8D 01 60       sta PORTA
0080A6  1  A9 A0          lda #(RS | E)   ; Set E bit to send instruction
0080A8  1  8D 01 60       sta PORTA
0080AB  1  20 C2 80       jsr short_delay ; extend pulse width to meet datasheet (>450ns)
0080AE  1  A9 20          lda #RS         ; Clear E bits
0080B0  1  8D 01 60       sta PORTA
0080B3  1  60             rts
0080B4  1               
0080B4  1               delay:
0080B4  1  A2 FF          ldx #$FF
0080B6  1  A0 FF          ldy #$FF
0080B8  1               delay_loop1:
0080B8  1  88             dey
0080B9  1  F0 06          beq end_delay
0080BB  1               delay_loop2:
0080BB  1  CA             dex              ; 2 clock cycles
0080BC  1  F0 FA          beq delay_loop1  ; 2 clock cycles (when not taken)
0080BE  1  4C BB 80       jmp delay_loop2  ; 2 clock cycles
0080C1  1               end_delay:
0080C1  1  60             rts
0080C2  1               
0080C2  1               short_delay:
0080C2  1  A0 05          ldy #$05
0080C4  1               short_delay_loop:
0080C4  1  88             dey
0080C5  1  F0 03          beq end_short_delay
0080C7  1  4C C4 80       jmp short_delay_loop
0080CA  1               end_short_delay:
0080CA  1  60             rts
0080CB  1               
0080CB  1               .SEGMENT "RESETVEC"
0080CB  1               .org $FFFA
00FFFA  1               
00FFFA  1  00 00            .word $0000    ; NMI
00FFFC  1  00 80            .word reset    ; RESET
00FFFE  1  00 00            .word $0000    ; BRK
00FFFE  1               
